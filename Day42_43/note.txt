1、基本oop思想：我们想要在程序中使用对象来表示现实世界模型，并提供一个简单的方式来访问它的功能。对象可以包含相关的数据和代码，表示现实世界模型的一些信息或者功能，或者它特有的一些行为。对象数据（函数）可以有结构的存储（封装）在对象包内（命名空间），使它容易组织和访问。
2、定义一个对象模板->创造一个真正的对象->具体的对象
js用一种称为构造函数的特殊函数来定义对象和它们的特征，提供了所需对象（实例）的有效方法，将对象的数据和特征函数按需联结至相应对象。通过原型链的参考链链接过去的。
3、js被描述为一种基于原型的语言，每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层，这种关系被称为原型链。_proto_属性，是从构造函数的prototype属性派生的。
4、每个实例对象都从原型中继承了一个constructor属性，该属性指向了用于构造此实例对象的构造函数。
5、call（）函数。基本上，这个函数允许您调用一个在这个文件里别处定义的函数。第一个参数指明了在您运行这个函数时想对“this”指定的值，也就是说，您可以重新指定您调用的函数里所有“this”指向的对象。其他的变量指明了所有目标函数运行时接受的参数。
6、<canvas> 元素, 然后对其调用getContext()从而我们获得一个开始画画的环境。存储以上操作结果的变量（ctx）是一个对象，直接代指画布上的一块允许我们绘制 2D 图形的区域。
7、面向对象程序设计的目的是在编程中促进更好的灵活性和可维护性，面向对象的代码开发更简单，更容易理解。 在JavaScript中，命名空间只是另一个包含方法，属性，对象的对象。
JavaScript 中的每个对象都是 Object 对象的实例且继承它所有的属性和方法。构造器是对象中的一个方法。创建一个或多个类的专门版本类方式称为继承（Javascript只支持单继承）。
8、原型具有普通对象结构，可以将任何普通对象设置为原型对象; 一般情况下，对象都继承与Object,也可以理解Object是所有对象的超类,Object是没有原型的，而构造函数拥有原型，因此实列化的对象也是Object的实列。假如A需要继承于B，那么A.prototype(A的原型) = new B()（作为B的实列） 即可实现A继承于B。for循环是有顺序的，for-in循环遍历对象是无序的，因此我们如果需要对象保证顺序的话，可以把对象转换为数组来，然后再使用for循环遍历即可。
9、封装：把抽象出来的数据和对数据的操作封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作，才能对数据进行封装。继承：当多个类存在相同的属性(变量)和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过继承父类中的属性和方法。多态：JS函数不支持多态，但是事实上JS函数是无态的，支持任意长度，类型的参数列表。如果同时定义了多个同名函数，则以最后一个函数为准。
10、创建对象的方法：a.原始模式：对象字面量方式、object构造函数方式。b.工厂模式：定义一个函数创建对象 c.构造函数：为对象定义一个构造函数 d.原型模式：直接定义prototype属性、字面量定义方式 e.混合模式（构造+原型）